[{"title":"hexo多主题构建","path":"/stellar/posts/2265/","content":"创建hexo项目首先，我们需要先创建一个hexo项目，hexo中默认的主题是landscape。 引入第二个主题复制_config.yml文件，修改文件名称为_config.theme.yml，然后在文件中添加对应的主题配置 hexo generate生成时，使用generate的--config参数生成对应主题配置的静态资源。 1hexo generate &amp;&amp; hexo generate --config _config.theme.yml 这样生成的静态资源在public目录下，还会有一个theme目录，既是第二个主题的目录，部署后可以通过主站地址/theme进行访问 最后现在的博客页主题使用fluid，wiki菜单使用的主题是stellar，网址导航使用的主题是webstack","tags":["hexo","多主题"],"categories":["hexo"]},{"title":"搭建自己的chatgpt网页版","path":"/stellar/posts/60861/","content":"PS: 如果想不使用科学上网就可以访问到需要有国内域名 申请OpenAI账号要申请OpenAI账号，您需要按照以下步骤进行操作： 首先，您需要科学上网以便访问OpenAI的官方网站。 准备一个Gmail或Outlook账号，用于注册OpenAI账号。 在注册过程中，您将需要进行手机短信验证码验证。您可以使用接码平台sms-activate来获取验证码。 完成账号注册后，您就可以免费使用ChatGPT 3.5进行对话了。请注意，使用ChatGPT 3.5需要一直保持科学上网。 Vercel部署ChatGPT-Next-Web您可以使用ChatGPT-Next-Web来进行Vercel部署。按照以下步骤操作： 首先，前往这个链接获取如何使用ChatGPT-Next-Web的详细说明。 在部署时，您需要设置两个环境变量。第一个是OPENAI_API_KEY，您可以在OpenAI官方网站获取该API密钥。第二个是CODE，这是页面上设置的登录码。只有在输入正确的登录码后，才能进行请求。这是为了防止过度请求tokens。 设置域名目前Vercel部署后的域名不能直接连接，但如果您拥有自己的域名，您可以通过配置域名来使用自己的域名进行访问。","tags":["ChatGpt","ChatGpt-nex-web","Vercel"],"categories":["ChatGpt"]},{"title":"python项目离线部署","path":"/stellar/posts/38532/","content":"注意 打包环境的python、pip版本和系统架构应和部署环境保持一致，即在windows上下载的包不能在linux上使用，pip低版本不能使用pip高版本的包。 可以使用pip debug -verbose查看pip安装允许的包后缀类型 venv 虚拟环境首先我们需要一个虚拟环境，虚拟环境可以让我们只安装需要的依赖。 python -m venv venv 如果是使用PyCharm创建的python项目，已经创建好了venv requirements.txtpip freeze > requirements.txt 将当前python环境的安装包信息保存到requirements.txt文件 pip download# 下载requirements.txt中的依赖包到packages目录下，使用清华镜像 pip download -d ./packages -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple pip install把packages目录上传到服务器，安装 pip install -r requirements.txt --no-index -f packages","tags":["python部署","pip使用","requirements"],"categories":["python"]},{"title":"linux常用命令","path":"/stellar/posts/30335/","content":"创建用户1useradd username 修改用户密码1passwd username 修改文件夹用户权限1chown -R username:userGroup dir/ 查看服务器内存1free -h 查看服务器磁盘使用1df -h 安装zip1yum install -y unzip zip 打包文件1tar -czvf /path/to/archive.tar.gz /path/to/directory 解压文件1234# -C 指定解压的目录tar -C /extract/to/path -xzvf /path/to/archive.tar.gzunzip test.zip To be continued","tags":["linux"],"categories":["linux"]},{"title":"springboot打包zip","path":"/stellar/posts/27600/","content":"Spring boot 打包成zip官方文档：apache-maven-assembly-plugin assembly 是一个maven插件，可以将项目构建包，依赖，模块，文档以及其它文件合并到一个单文件中。assembly 的配置称为descriptor，按照描述文件的配置工作，可以使用assembly内置的几种配置，处理了许多常用操作，比如打包项目工件以及项目文档到一个zip文件中。或者可以为项目配置自定义的配置来设置在assembly中如何控制依赖，模块和其它文件打包。 支持的打包类型 zip tar tar.gz (or tgz) tar.bz2 (or tbz2) tar.snappy tar.xz (or txz) tar.zst (or tzst) jar dir war and any other format that the ArchiveManager has been configured for 要使用assembly插件，如果要使用预定义的配置，需要在&lt;descriptorRefs&gt;&lt;descriptorRefs&gt;参数中设置配置，如果要使用自定义配置，需要在&lt;descriptors&gt;&lt;/descriptors&gt;参数中设置配置文件的路径。 例如，如果你的项目最终构建是一个jar文件，想要包含所有的项目依赖，可以使用assembly的内置配置，在pom.xml添加插件配置如下： 12345678910&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt; &lt;configuration&gt; &lt;descriptorRefs&gt; &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt; &lt;/descriptorRefs&gt; &lt;/configuration&gt;&lt;/plugin&gt; assembly允许一次指定多个descriptorRef，来生成多种类型的组件。descriptorRef 可选值有 jar-with-dependencies、bin、src、project，具体文档参考descriptor-refs 或者我们想要创建一个自定义的组装描述文件，可以这样使用： 12345678910&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt; &lt;configuration&gt; &lt;descriptors&gt; &lt;descriptor&gt;src/assembly/assembly.xml&lt;/descriptor&gt; &lt;/descriptors&gt; &lt;/configuration&gt;&lt;/plugin&gt; assembly.xml: 12345678910111213141516171819202122232425262728&lt;assembly xmlns=&quot;http://maven.apache.org/ASSEMBLY/2.2.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/ASSEMBLY/2.2.0 https://maven.apache.org/xsd/assembly-2.2.0.xsd&quot;&gt; &lt;id&gt;make-assembly&lt;/id&gt; &lt;formats&gt; &lt;format&gt;zip&lt;/format&gt; &lt;format&gt;tar.gz&lt;/format&gt; &lt;/formats&gt; &lt;fileSets&gt; &lt;fileSet&gt; &lt;directory&gt;$&#123;project.basedir&#125;&lt;/directory&gt; &lt;outputDirectory&gt;&lt;/outputDirectory&gt; &lt;includes&gt; &lt;include&gt;README*&lt;/include&gt; &lt;include&gt;LICENSE*&lt;/include&gt; &lt;include&gt;NOTICE*&lt;/include&gt; &lt;/includes&gt; &lt;/fileSet&gt; &lt;fileSet&gt; &lt;directory&gt;$&#123;project.build.directory&#125;&lt;/directory&gt; &lt;outputDirectory&gt;bin&lt;/outputDirectory&gt; &lt;includes&gt; &lt;include&gt;*.jar&lt;/include&gt; &lt;/includes&gt; &lt;/fileSet&gt; &lt;/fileSets&gt;&lt;/assembly&gt; 当我们配置好需要的描述文件之后，是时候进行构建了。我们需要将assembly的执行加入到项目的构建周期上，添加以下配置： 1234567891011121314151617181920&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;version&gt;3.3.0&lt;/version&gt; &lt;configuration&gt; &lt;descriptors&gt; &lt;descriptor&gt;src/assembly/assembly.xml&lt;/descriptor&gt; &lt;/descriptors&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;assembly&lt;/id&gt; &lt;!-- 绑定到package阶段 --&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 配置好以后，当我们执行 mvn package的时候，assembly 将会在package之后执行，根据assembly.xml中的配置，打包zip和tar.gz文件","tags":["springboot","maven-assembly"],"categories":["Sprint Boot"]},{"title":"关于","path":"/stellar/about/index.html","content":"网站使用Hexo，Fluid主题构建，GitHub Pages 部署 用于记录工作中遇到的问题和技术"},{"path":"/stellar/css/custom.css","content":"/* font begin */ @font-face{ font-family: 'JetBrainsMono-SemiBoldItalic'; src: url('/font/JetBrainsMono-SemiBoldItalic.ttf'); } .markdown-body code, .markdown-body pre { font-family: JetBrainsMono-SemiBoldItalic, serif; } /* font end */ /* hexo-admonition begin */ :root { --bg-color: \"\"; } .admonition { margin: 1.5625em 0; padding: .6rem; overflow: hidden; font-size: .64rem; page-break-inside: avoid; color: var(--text-color); border-left: .3rem solid #42b983; border-radius: .3rem; box-shadow: 0 0.1rem 0.4rem rgba(0,0,0,.05), 0 0 0.05rem rgba(0,0,0,.1); background-color: var(--bg-color); } p.admonition-title { position: relative; margin: -.6rem -.6rem .8em -.6rem !important; padding: .4rem .6rem .4rem 2.5rem; font-weight: 700; background-color:rgba(66, 185, 131, .1); } .admonition-title::before { position: absolute; top: .6rem; left: 1rem; width: 12px; height: 12px; background-color: #42b983; border-radius: 50%; content: ' '; } .info>.admonition-title, .todo>.admonition-title { background-color: rgba(0,184,212,.1); } .warning>.admonition-title, .attention>.admonition-title, .caution>.admonition-title { background-color: rgba(255,145,0,.1); } .failure>.admonition-title, .missing>.admonition-title, .fail>.admonition-title, .error>.admonition-title { background-color: rgba(255,82,82,.1); } .admonition.info, .admonition.todo { border-color: #00b8d4; } .admonition.warning, .admonition.attention, .admonition.caution { border-color: #ff9100; } .admonition.failure, .admonition.missing, .admonition.fail, .admonition.error { border-color: #ff5252; } .info>.admonition-title::before, .todo>.admonition-title::before { background-color: #00b8d4; border-radius: 50%; } .warning>.admonition-title::before, .attention>.admonition-title::before, .caution>.admonition-title::before { background-color: #ff9100; border-radius: 50%; } .failure>.admonition-title::before,.missing>.admonition-title::before,.fail>.admonition-title::before,.error>.admonition-title::before{ background-color: #ff5252;; border-radius: 50%; } .admonition>:last-child { margin-bottom: 0 !important; } /* hexo-admonition end */"},{"path":"/stellar/js/custom.js","content":"var colorToggleButtonSelector = '#color-toggle-btn'; var darkColor = { \"--bg-color\": \"#2e303e\", } var lightColor = { \"--bg-color\": \"#fafafa\" } function changeColor() { var color_mode = document.documentElement.getAttribute('data-user-color-scheme'); if (color_mode === \"dark\") { for (let lightColorKey in lightColor) { document.documentElement.style.setProperty(lightColorKey, darkColor[lightColorKey]); } } else { for (let darkColorKey in darkColor) { document.documentElement.style.setProperty(darkColorKey, lightColor[darkColorKey]); } } } var button = document.querySelector(colorToggleButtonSelector); if (button) { // 当用户点击切换按钮时，获得新的显示模式、写入 localStorage、并在页面上生效 button.addEventListener('click', function () { changeColor(); }); } changeColor();"},{"title":"windows","path":"/stellar/windows/index.html","content":"个人在windows使用的软件 Pot 跨平台翻译官网地址配合插件可进行全局划词翻译 CClean注册表清理 PowerToys微软工具 Everything全文搜索工具 PowerToys Everything 插件powerToys中使用everything的插件 GitHub地址 开发工具devtools常用工具集成 FileZillaftp,sftp 文件传输 Gridea博客生成器 TyporaMarkDown 编辑器 Sublime Text 3Sublime Text3取消自动更新(解决设置update_check后不生效)_a new version of sublime_郭咖啡的博客-CSDN博客 PDF阅读器BookxNote ProPDF阅读器 ScreenToGifgif动图制作 Bandizip解压缩工具 7z解压缩工具，可压缩到更小的体积 draw.io免费流程图软件 XMind流程图，思维导图软件 PicGo图床管理工具 WizTree磁盘清理工具 toolboxjetBrains 软件管理，版本管理 nodenodejs git分布式版本控制系统 javamavenAxure原型设计 HuoRongIDMQQMusicWeChatWeMeetfastgithubgithub加速GitHub地址 Clash For Windowswindows网络代理工具 向日葵远程 ToDesk远程 Watt Tookit原Steam++，助力访问stream商店，可以在windows store里下载安装"},{"title":"这是分页标题","path":"/stellar/wiki/stellar/index.html","content":"first page for wiki"}]